#include "bank_db-Queries.h"

namespace Queries
{
    const string Queries::defaultCommand =
        "docker exec " + ConnectionConfig::containter + " psql --tuples-only --no-align -U " + ConnectionConfig::user + " -d " + ConnectionConfig::dbname + " -c ";

    string executeCommand(const string& value)
    {
        ostringstream commandStream;
        commandStream << Queries::defaultCommand << "\"" << value << "\"";
        string command = commandStream.str();
        LOG_OWN(command, Colors::LightPink);

        array<char, 128> buffer;
        string result;
        unique_ptr<FILE, decltype(&pclose)> pipe(popen(command.c_str(), "r"), pclose);
        if (!pipe) { throw runtime_error("popen() failed!"); }

        steady_clock::time_point start = steady_clock::now();
        while (true)
        {
            if (steady_clock::now() - start > seconds(ConnectionConfig::queryTime)) { pclose(pipe.release()); throw runtime_error("Command execution timed out!"); }

            if (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) { result += buffer.data(); }
            else { break; }

            sleep_for(milliseconds(100));
        }

        return dataTrim(result);
    }

    namespace Provider
    {
        const string Queries::Provider::deleteTablesData =
            "SET search_path TO bank_system; "

            "DELETE FROM cards; "
            "DELETE FROM transactions; "
            "DELETE FROM accounts; "
            "DELETE FROM operation_types; "
            "DELETE FROM clients;";

        const string Queries::Provider::connectAccountsTable =
            "CREATE TABLE IF NOT EXISTS accounts ("
            "account_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
            "client_id INT NOT NULL REFERENCES clients(client_id) ON DELETE CASCADE, "
            "balance NUMERIC(15, 2) DEFAULT 0.00 CHECK (balance >= 0), "
            "currency VARCHAR(3) NOT NULL DEFAULT 'UAH', "
            "opened_date DATE NOT NULL DEFAULT CURRENT_DATE, "
            "closed_date DATE CHECK (closed_date IS NULL OR closed_date > opened_date), "
            "status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'FROZEN', 'CLOSED')));";

        const string Queries::Provider::connectClientsTable =
            "CREATE DOMAIN phone_number AS VARCHAR(20) "
            "CHECK (VALUE ~'^+?[0-9]{7,15}$'); "

            "CREATE DOMAIN email_type AS VARCHAR(100) "
            "CHECK (VALUE ~'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Za-z]{2,}$'); "

            "CREATE TABLE IF NOT EXISTS clients ("
            "client_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
            "first_name VARCHAR(50) NOT NULL, "
            "last_name VARCHAR(50) NOT NULL, "
            "passport_number VARCHAR(20) UNIQUE NOT NULL, "
            "phone phone_number UNIQUE NOT NULL, "
            "email email_type UNIQUE NOT NULL, "
            "registration_date DATE DEFAULT CURRENT_DATE);";

        const string Queries::Provider::connectCardsTable =
            "CREATE TABLE IF NOT EXISTS cards ("
            "card_id SERIAL PRIMARY KEY, "
            "account_id INT NOT NULL REFERENCES accounts(account_id) ON DELETE CASCADE, "
            "card_number CHAR(16) UNIQUE NOT NULL CHECK (card_number ~ '^[0-9]{16}$'), "
            "expiry_date DATE NOT NULL CHECK (expiry_date > CURRENT_DATE), "
            "is_blocked BOOLEAN NOT NULL DEFAULT FALSE, "
            "issue_date DATE NOT NULL DEFAULT CURRENT_DATE);";

        const string Queries::Provider::connectOperationsTable =
            "CREATE TABLE IF NOT EXISTS operation_types ("
            "operation_type_id SERIAL PRIMARY KEY, "
            "name VARCHAR(50) NOT NULL UNIQUE, "
            "is_income BOOLEAN NOT NULL, "
            "needs_approval BOOLEAN DEFAULT FALSE);";

        const string Queries::Provider::connectTransactionsTable =
            "CREATE TABLE IF NOT EXISTS transactions ("
            "transaction_id SERIAL PRIMARY KEY, "
            "from_account_id INT REFERENCES accounts(account_id), "
            "to_account_id INT NOT NULL REFERENCES accounts(account_id), "
            "amount NUMERIC(15,2) NOT NULL CHECK (amount > 0), "
            "operation_type INT NOT NULL, "
            "transaction_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, "
            "description TEXT, "
            "status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'COMPLETED', 'CANCELED')));";
    }

    namespace Clients
    {
        string insertClient(const string& firstName, const string& lastName, const string& passportNumber, const string& phone, const string& email)
        {
            ostringstream queryStream;
            queryStream
                << "INSERT INTO bank_system.clients (first_name, last_name, passport_number, phone, email) "
                << "VALUES ('" << firstName << "', '" << lastName << "', '" << passportNumber << "', '" << phone << "', '" << email << "') "
                << "RETURNING client_id"
                << ";";
            return queryStream.str();
        }

        string getClient(size_t id)
        {
            ostringstream queryStream;
            queryStream
                << "SELECT first_name, last_name, passport_number, phone, email, registration_date "
                << "FROM bank_system.clients "
                << "WHERE client_id = " << id
                << ";";
            return queryStream.str();
        }

        string updateClient(size_t clientId, const string& firstName, const string& lastName, const string& passportNumber, const string& phone, const string& email, const string& registrationDate)
        {
            ostringstream queryStream;
            queryStream
                << "UPDATE bank_system.clients SET "
                << "first_name = '" << firstName << "', "
                << "last_name = '" << lastName << "', "
                << "passport_number = '" << passportNumber << "', "
                << "phone = '" << phone << "', "
                << "email = '" << email << "', "
                << "registration_date = '" << registrationDate << "' "
                << "WHERE client_id = " << clientId
                << ";";
            return queryStream.str();
        }

        string deleteClient(size_t id)
        {
            ostringstream queryStream;
            queryStream
                << "DELETE FROM bank_system.clients WHERE client_id = " << id
                << ";";
            return queryStream.str();
        }
    }

    namespace Accounts
    {
        string insertAccount(const double& balance, const string& currency, const string& status)
        {
            cout << "insertAccount" << endl;
            ostringstream queryStream;
            queryStream
                << "INSERT INTO bank_system.accounts (balance, currency, status) "
                << "VALUES (" << balance << ", '" << currency << "', '" << status << "') "
                << "RETURNING account_id"
                << ";";
            return queryStream.str();
        }

        string getAccount(size_t id)
        {
            ostringstream queryStream;
            queryStream
                << "SELECT * FROM bank_system.accounts "
                << "WHERE account_id = " << id
                << ";";
            return queryStream.str();
        }

        string updateAccount(size_t accountId, double balance, const string& currency, const string& openedDate, const string& closedDate, const string& status)
        {
            ostringstream queryStream;
            queryStream
                << "UPDATE bank_system.accounts SET "
                << "balance = " << balance << ", "
                << "currency = '" << currency << "', "
                << "opened_date = '" << openedDate << "', "
                << "closed_date = '" << closedDate << "', "
                << "status = '" << status << "' "
                << "WHERE account_id = " << accountId
                << ";";
            return queryStream.str();
        }

        string deleteAccount(size_t id)
        {
            ostringstream queryStream;
            queryStream
                << "DELETE FROM bank_system.accounts "
                << "WHERE account_id = " << id
                << ";";
            return queryStream.str();
        }
    }
}